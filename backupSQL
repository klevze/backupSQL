#!/bin/bash

# Set the timestamp
TIMESTAMP=$(date +"%F")

# Include the backup configuration file
BACKUP_CONFIG="$(dirname "$0")/backup.cnf"
source "$BACKUP_CONFIG"

# Include the client configuration file
CLIENT_CONFIG="$(dirname "$0")/client.cnf"
MYSQL="/usr/bin/mysql"
MYSQLDUMP="/usr/bin/mysqldump"

# Define an array of databases to ignore during backup
IGNORED_DATABASES=("sys" "mysql" "information_schema" "performance_schema" "phpmyadmin")

# Get a list of all databases and redirect stdout to /dev/null
all_databases=$("$MYSQL" --defaults-extra-file="$CLIENT_CONFIG" -e "SHOW DATABASES;" 2>/dev/null | grep -Ev "(Database)")

# Create an array to store databases with backup errors
databases_with_errors=()

# Function to send a message to Telegram
send_telegram_message() {
    local message="$1"
    
    curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_TOKEN/sendMessage" \
        -d "chat_id=$TELEGRAM_CHATID" \
        -d "text=$message"
}

# Function to check MySQL connection
check_mysql_connection() {
    if "$MYSQL" --defaults-extra-file="$CLIENT_CONFIG" -e "SELECT 1;" >/dev/null 2>&1; then
        echo "MySQL connection successful."
    else
        echo "Error: Unable to connect to MySQL. Check credentials and permissions."
        exit 1
    fi
}

# Check MySQL connection before proceeding
check_mysql_connection

# Print table header
printf "|---------------------------|---------------------------|\n"
printf "| %-25s | %-25s |\n" "Database" "Status"
printf "|---------------------------|---------------------------|\n"

# Loop through each database and perform a backup if not in the IGNORED_DATABASES array
for db in $all_databases; do
    if [[ ! " ${IGNORED_DATABASES[@]} " =~ " $db " ]]; then
        status="Success"
        # Define file names
        temp_file="$BACKUP_DIR$db-$TIMESTAMP.sql"
        archive_file="$BACKUP_DIR$db-$TIMESTAMP.tar.xz"

        # Perform mysqldump and write to a temporary SQL file
        if ! "$MYSQLDUMP" --defaults-extra-file="$CLIENT_CONFIG" \
              --default-character-set=utf8mb4 --single-transaction --force --opt --databases "$db" \
              > "$temp_file"; then
            status="Error"
            databases_with_errors+=("$db")
        else
            # Archive the SQL dump file using tar with xz compression.
            # The -C option changes to the backup directory so that the stored file has just its basename.
            if ! tar -cJf "$archive_file" -C "$BACKUP_DIR" "$(basename "$temp_file")"; then
                status="Error"
                databases_with_errors+=("$db")
            fi
            # Remove the temporary SQL file
            rm -f "$temp_file"
        fi

        # Print colored table row based on status
        if [ "$status" == "Success" ]; then
            message="Backup successful for database: $db"
            printf "| \033[0;32m%-25s\033[0m | \033[0;32m%-25s\033[0m |\n" "$db" "$status"
        elif [ "$status" == "Error" ]; then
            message="Error during backup for database: $db"
            printf "| \033[0;31m%-25s\033[0m | \033[0;31m%-25s\033[0m |\n" "$db" "$status"
        else
            message="Skipped backup for ignored database: $db"
            printf "| \033[0;33m%-25s\033[0m | \033[0;33m%-25s\033[0m |\n" "$db" "Skipped"
        fi

    else
        # Print colored table row for ignored database
        printf "| \033[0;33m%-25s\033[0m | \033[0;33m%-25s\033[0m |\n" "$db" "Skipped"
    fi
done

printf "|---------------------------|---------------------------|\n"

# Display the list of databases that encountered errors
if [ ${#databases_with_errors[@]} -gt 0 ]; then
    message="Databases with backup errors on $TELEGRAM_SERVERID:\n${databases_with_errors[@]}"
    echo -e "\n$message"

    # Send the message to Telegram if TELEGRAM_ENABLE is true
    if [ "$TELEGRAM_ENABLE" == "true" ]; then
        send_telegram_message "$message"  >/dev/null 2>&1
    fi
else
    message="All backups completed successfully on $TELEGRAM_SERVERID."
    echo -e "\n$message"
fi

exit 0
